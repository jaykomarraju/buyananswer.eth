import*as e from"react";import{useState as n,useRef as t,useCallback as o,useEffect as r,useLayoutEffect as l}from"react";import{flushSync as i}from"react-dom";import a from"raf";import s from"tiny-warning";function c(){return c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},c.apply(this,arguments)}function d(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n.indexOf(t=l[o])>=0||(r[t]=e[t]);return r}const p=()=>{};function u(e){return null!=e&&e.current?e.current.scrollHeight:(s(!0,"useCollapse was not able to find a ref to the collapse element via `getCollapseProps`. Ensure that the element exposes its `ref` prop. If it exposes the ref prop under a different name (like `innerRef`), use the `refKey` property to change it. Example:\n\n{...getCollapseProps({refKey: 'innerRef'})}"),"auto")}const f=(...e)=>(...n)=>e.forEach(e=>e&&e(...n));function h(...e){return e.every(e=>null==e)?null:n=>{e.forEach(e=>{!function(e,n){if(null!=e)if("function"==typeof e)e(n);else try{e.current=n}catch(t){throw new Error(`Cannot assign value "${n}" to ref "${e}"`)}}(e,n)})}}const g="undefined"!=typeof window?l:r;let m=!1,x=0;const y=()=>++x,E=e.useId,b=["duration","easing","collapseStyles","expandStyles","onExpandStart","onExpandEnd","onCollapseStart","onCollapseEnd","isExpanded","defaultExpanded","hasDisabledAnimation"],C=["disabled","onClick"],w=["style","onTransitionEnd","refKey"],v="cubic-bezier(0.4, 0, 0.2, 1)";function S(e={}){let{duration:l,easing:x=v,collapseStyles:S={},expandStyles:k={},onExpandStart:$=p,onExpandEnd:O=p,onCollapseStart:P=p,onCollapseEnd:T=p,isExpanded:D,defaultExpanded:K=!1,hasDisabledAnimation:j=!1}=e,I=d(e,b);const[N,z]=function(e,l){const[i,a]=n(l||!1),c=t(null!=e),d=c.current?e:i,p=o(e=>{c.current||a(e)},[]);return r(()=>{s(!(c.current&&null==e),"useCollapse is changing from controlled to uncontrolled. useCollapse should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop."),s(!(!c.current&&null!=e),"useCollapse is changing from uncontrolled to controlled. useCollapse should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop.")},[e]),[d,p]}(D,K),A=void 0!==E?E():function(e){const t=m?y():null,[o,l]=n(t);return g(()=>{null===o&&l(y())},[]),r(()=>{!1===m&&(m=!0)},[]),null!=o?String(o):void 0}(),H=t(null);!function(e){let n=e=>{};"production"!==process.env.NODE_ENV&&(n=e=>{if(null==e||!e.current)return;const{paddingTop:n,paddingBottom:t}=window.getComputedStyle(e.current);s(!(n&&"0px"!==n||t&&"0px"!==t),"react-collapsed: Padding applied to the collapse element will cause the animation to break and not perform as expected. To fix, apply equivalent padding to the direct descendent of the collapse element.")}),r(()=>{n(e)},[e])}(H);const R=`${I.collapsedHeight||0}px`,q={display:"0px"===R?"none":"block",height:R,overflow:"hidden"},[B,M]=n(N?{}:q),V=e=>{i(()=>{M(e)})},_=e=>{V(n=>c({},n,e))};function F(e){if(j)return{};const n=l||function(e){if(!e||"string"==typeof e)return 0;const n=e/36;return Math.round(10*(4+15*n**.25+n/5))}(e);return{transition:`height ${n}ms ${x}`}}!function(e,n){const o=t(!0);r(()=>{o.current?o.current=!1:a(N?()=>{$(),_(c({},k,{willChange:"height",display:"block",overflow:"hidden"})),a(()=>{const e=u(H);_(c({},F(e),{height:e}))})}:()=>{P();const e=u(H);_(c({},S,F(e),{willChange:"height",height:e})),a(()=>{_({height:R,overflow:"hidden"})})})},n)}(0,[N,R]);const G=e=>{if(e.target===H.current&&"height"===e.propertyName)if(N){const e=u(H);e===B.height?V({}):_({height:e}),O()}else B.height===R&&(V(q),T())};return{getToggleProps:function(e={}){let{disabled:n=!1,onClick:t=p}=e,o=d(e,C);return c({type:"button",role:"button",id:`react-collapsed-toggle-${A}`,"aria-controls":`react-collapsed-panel-${A}`,"aria-expanded":N,tabIndex:0,disabled:n},o,{onClick:n?p:f(t,()=>z(e=>!e))})},getCollapseProps:function(e={}){let{style:n={},onTransitionEnd:t=p,refKey:o="ref"}=e,r=d(e,w);return c({id:`react-collapsed-panel-${A}`,"aria-hidden":!N},r,{[o]:h(H,r[o]),onTransitionEnd:f(G,t),style:c({boxSizing:"border-box"},n,B)})},isExpanded:N,setExpanded:z}}export{S as default};
//# sourceMappingURL=react-collapsed.modern.js.map
